# The tests in this file use data generated by the create_fake_data.py notebook. If the tests
# fail because of a format change, you may need to rerun that notebook to regenerate
# the data/demo_data.fits file.

import os
import tempfile
import unittest
import warnings

from kbmod.fake_data.demo_helper import make_demo_data
from kbmod.run_search import SearchRunner
from kbmod.search import HAS_CUDA
from kbmod.work_unit import WorkUnit


class test_end_to_end(unittest.TestCase):
    @unittest.skipIf(not HAS_CUDA, "Skipping test (no GPU detected)")
    def test_demo_defaults(self):
        with tempfile.TemporaryDirectory() as dir_name:
            # Create a fake data file.
            filename = os.path.join(dir_name, "test_workunit1.fits")
            make_demo_data(filename)

            # Load the WorkUnit. Ignore the warning about invalid WCS.
            with warnings.catch_warnings():
                warnings.simplefilter("ignore")
                input_data = WorkUnit.from_fits(filename, show_progress=False)
            input_data.config.set("coadds", ["mean"])

            rs = SearchRunner()
            keep = rs.run_search_from_work_unit(input_data)
            self.assertGreaterEqual(len(keep), 1)

            # Check that we have both a stamp column and a coadd_mean column.
            self.assertEqual(keep["stamp"][0].shape, (21, 21))
            self.assertEqual(keep["coadd_mean"][0].shape, (21, 21))

    @unittest.skipIf(not HAS_CUDA, "Skipping test (no GPU detected)")
    def test_demo_stamp_size(self):
        with tempfile.TemporaryDirectory() as dir_name:
            # Create a fake data file.
            filename = os.path.join(dir_name, "test_workunit2.fits")
            make_demo_data(filename)

            # Load the WorkUnit. Ignore the warning about invalid WCS.
            with warnings.catch_warnings():
                warnings.simplefilter("ignore")
                input_data = WorkUnit.from_fits(filename, show_progress=False)

            # Override the stamp settings of the configuration
            input_data.config.set("stamp_radius", 15)
            input_data.config.set("save_all_stamps", True)
            input_data.config.set("coadds", ["mean"])

            rs = SearchRunner()
            keep = rs.run_search_from_work_unit(input_data)
            self.assertGreaterEqual(len(keep), 1)

            self.assertIsNotNone(keep["stamp"][0])
            self.assertEqual(keep["stamp"][0].shape, (31, 31))

            self.assertIsNotNone(keep["coadd_mean"][0])
            self.assertEqual(keep["coadd_mean"][0].shape, (31, 31))

            self.assertIsNotNone(keep["all_stamps"][0])
            for s in keep["all_stamps"][0]:
                self.assertEqual(s.shape, (31, 31))

    @unittest.skipIf(not HAS_CUDA, "Skipping test (no GPU detected)")
    def test_demo_output_files(self):
        with tempfile.TemporaryDirectory() as dir_name:
            # Create a fake data file.
            filename = os.path.join(dir_name, "test_workunit3.fits")
            make_demo_data(filename)

            # Load the WorkUnit. Ignore the warning about invalid WCS.
            with warnings.catch_warnings():
                warnings.simplefilter("ignore")
                input_data = WorkUnit.from_fits(filename, show_progress=False)
            input_data.config.set("result_filename", os.path.join(dir_name, "demo_res.ecsv"))
            input_data.config.set("save_config", True)

            rs = SearchRunner()
            keep = rs.run_search_from_work_unit(input_data)
            self.assertGreaterEqual(len(keep), 1)

            self.assertTrue(os.path.exists(os.path.join(dir_name, "demo_res.ecsv")))
            self.assertTrue(
                os.path.exists(os.path.join(dir_name, "demo_res_provenance/demo_res_config.yaml"))
            )


if __name__ == "__main__":
    unittest.main()

# The tests in this file use data generated by the create_fake_data.py notebook. If the tests
# fail because of a format change, you may need to rerun that notebook to regenerate
# the data/demo_data.fits file.

import math
import numpy as np
import os
import tempfile
import unittest

from kbmod.configuration import SearchConfiguration
from kbmod.fake_data.fake_data_creator import *
from kbmod.run_search import *
from kbmod.search import *
from kbmod.wcs_utils import make_fake_wcs
from kbmod.work_unit import WorkUnit

# from .utils_for_tests import get_absolute_demo_data_path
# import utils_for_tests
from utils.utils_for_tests import get_absolute_demo_data_path


# this is the first test to actually test things like get_all_stamps from
# analysis utils. For now stamps have to be RawImages (because methods like
# interpolate and convolve are defined to work on RawImage and not as funciton)
# so it makes sense to duplicate all this functionality to return np arrays
# (instead of RawImages), but hopefully we can deduplicate all this by making
# these operations into functions and calling on the .image attribute
# apply_stamp_filter for example is literal copy of the C++ code in RawImage?
class test_end_to_end(unittest.TestCase):
    def setUp(self):
        # Define the path for the data.
        self.im_filename = get_absolute_demo_data_path("demo_data.fits")

    @unittest.skipIf(not HAS_GPU, "Skipping test (no GPU detected)")
    def test_demo_defaults(self):
        # Load the WorkUnit.
        input_data = WorkUnit.from_fits(self.im_filename)

        rs = SearchRunner()
        keep = rs.run_search_from_work_unit(input_data)
        self.assertGreaterEqual(len(keep), 1)
        self.assertEqual(keep["stamp"][0].shape, (21, 21))

    @unittest.skipIf(not HAS_GPU, "Skipping test (no GPU detected)")
    def test_demo_stamp_size(self):
        input_data = WorkUnit.from_fits(self.im_filename)

        # Override the stamp settings of the configuration
        input_data.config.set("stamp_radius", 15)
        input_data.config.set("mom_lims", [80.0, 80.0, 50.0, 20.0, 20.0])
        input_data.config.set("save_all_stamps", True)

        rs = SearchRunner()
        keep = rs.run_search_from_work_unit(input_data)
        self.assertGreaterEqual(len(keep), 1)

        self.assertIsNotNone(keep["stamp"][0])
        self.assertEqual(keep["stamp"][0].shape, (31, 31))

        self.assertIsNotNone(keep["all_stamps"][0])
        for s in keep["all_stamps"][0]:
            self.assertEqual(s.shape, (31, 31))

    @unittest.skipIf(not HAS_GPU, "Skipping test (no GPU detected)")
    def test_e2e_work_unit(self):
        num_images = 10

        # Create a fake data set with a single bright fake object and all
        # the observations on a single day.
        fake_times = create_fake_times(num_images, 57130.2, 10, 0.01, 1)
        ds = FakeDataSet(128, 128, fake_times, use_seed=True)
        trj = Trajectory(x=50, y=60, vx=5.0, vy=0.0, flux=500.0)
        ds.insert_object(trj)

        # Set the configuration to pick up the fake object.
        config = SearchConfiguration()
        config.set("ang_arr", [math.pi, math.pi, 16])
        config.set("v_arr", [0, 10.0, 20])

        fake_wcs = make_fake_wcs(10.0, 10.0, 128, 128)
        work = WorkUnit(im_stack=ds.stack, config=config, wcs=fake_wcs)

        with tempfile.TemporaryDirectory() as dir_name:
            file_path = os.path.join(dir_name, "test_workunit.fits")
            work.to_fits(file_path)

            rs = SearchRunner()
            keep = rs.run_search_from_file(file_path)
            self.assertGreaterEqual(len(keep), 1)


if __name__ == "__main__":
    unittest.main()
